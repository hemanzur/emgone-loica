//import groovy.swing.SwingBuilder

//gradle.taskGraph.whenReady { taskGraph ->
//    if(taskGraph.hasTask(':android:assembleDevelopmentRelease') || taskGraph.hasTask(':android:assembleProductionRelease')) {
//        def storePass = ''
//        def keyPass = ''
//        if(System.console() == null) {
//            new SwingBuilder().edt {
//                dialog(modal: true, title: 'Enter password', alwaysOnTop: true, resizable: false, locationRelativeTo: null, pack: true, show: true) {
//                    vbox { // Put everything below each other
//                        label(text: "Please enter store passphrase:")
//                        def input1 = passwordField()
//                        label(text: "Please enter key passphrase:")
//                        def input2 = passwordField()
//                        button(defaultButton: true, text: 'OK', actionPerformed: {
//                            storePass = input1.password;
//                            keyPass = input2.password;
//                            dispose();
//                        })
//                    }
//                }
//            }
//        } else {
//            storePass = System.console().readPassword("\nPlease enter store passphrase: ")
//            keyPass = System.console().readPassword("\nPlease enter key passphrase: ")
//        }
//
//        if(storePass.size() <= 0 || keyPass.size() <= 0) {
//            throw new InvalidUserDataException("You must enter the passwords to proceed.")
//        }
//
//        storePass = new String(storePass)
//        keyPass = new String(keyPass)
//
//        android.signingConfigs.release.storePassword = storePass
//        android.signingConfigs.release.keyPassword = keyPass
//    }
//}

android {
    signingConfigs {
        release {
            keyAlias 'nursoft'
            keyPassword ''
            storeFile file('/home/nanairo/nursoft/emg/llave_nursoft.jks')
            storePassword ''
        }
    }
    buildToolsVersion "25.0.3"
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.hachimanzur.loica"
        versionCode 17
        versionName "1.6.7"
        minSdkVersion 10
        targetSdkVersion 29
    }
    buildTypes {
        debug {}
        release {
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "EMGOne"

    productFlavors {
        development {
            resValue 'string', 'app_name', '"EMG One Loica Dev"'
            buildConfigField "String", "HOST", '"http://emgone.dev.nursoft.cl"'
        }
        production {
            resValue 'string', 'app_name', '"EMG One Loica"'
            applicationId "com.hachimanzur.loica"
            buildConfigField "String", "HOST", '"http://emgone.cl"'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

//        instrumentTest.setRoot('tests')
    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/arm64-v8a/").mkdirs();
    file("libs/x86_64/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}
task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.nursoft.emgone/com.nursoft.emgone.AndroidLauncher'
}
// sets up the Android Eclipse project, using the old Ant based build.
//eclipse {
//    // need to specify Java source sets explicitly, SpringSource Gradle Eclipse plugin
//    // ignores any nodes added in classpath.file.withXml
//    sourceSets {
//        main {
//            java.srcDirs "src", 'gen'
//        }
//    }
//
//    jdt {
//        sourceCompatibility = 1.6
//        targetCompatibility = 1.6
//    }
//
//    classpath {
//        plusConfigurations += [project.configurations.compile]
//        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'
//    }
//
//    project {
//        name = appName + "-android"
//        natures 'com.android.ide.eclipse.adt.AndroidNature'
//        buildCommands.clear();
//        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
//        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
//        buildCommand "org.eclipse.jdt.core.javabuilder"
//        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
//    }
//}
//// sets up the Android Idea project, using the old Ant based build.
//idea {
//    module {
//        sourceDirs += file("src");
//        scopes = [COMPILE: [plus: [project.configurations.compile]]]
//
//        iml {
//            withXml {
//                def node = it.asNode()
//                def builder = NodeBuilder.newInstance();
//                builder.current = node;
//                builder.component(name: "FacetManager") {
//                    facet(type: "android", name: "Android") {
//                        configuration {
//                            option(name: "UPDATE_PROPERTY_FILES", value: "true")
//                        }
//                    }
//                }
//            }
//        }
//    }
//}
dependencies {
}